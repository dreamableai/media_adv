name: Test

on:
  pull_request:
    paths:
      - 'lib/*.*'
      - 'src/*.*'
      - 'templates/*.*'
      - 'tests/Unit/**'
      - 'tests/Integration/**'
      - 'tests/javascript/**'
  push:
    paths:
      - 'lib/*.*'
      - 'src/*.*'
      - 'templates/*.*'
      - 'tests/Unit/**'
      - 'tests/Integration/**'
      - 'tests/javascript/**'
  workflow_dispatch:

env:
  # Location of the phpunit.xml and phpunit.integration.xml files
  PHPUNIT_CONFIG: ./tests/phpunit.xml
  PHPUNIT_INTEGRATION_CONFIG: ./tests/phpunit.integration.xml
  APP_NAME: mediadc
  CPA_NAME: cloud_py_api

jobs:
  phpunit-mysql:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-versions: ["7.4", "8.0"]
        server-versions: ['25']

    services:
      mysql:
        image: mariadb:10.5
        ports:
          - 4444:3306/tcp
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
        options: --health-cmd="mysqladmin ping" --health-interval 5s --health-timeout 2s --health-retries 5

    steps:
      - name: Cache nextcloud server
        id: nextcloud_setup
        uses: actions/cache@v3
        with:
          path: nextcloud-${{ matrix.server-versions }}.zip
          key: ${{ matrix.server-versions }}

      - name: Download nextcloud ${{ matrix.server-versions }}
        if: steps.nextcloud_setup.outputs.cache-hit != 'true'
        continue-on-error: true
        id: server-checkout
        run: |
          NCVERSION=${{ matrix.server-versions }}
          wget --quiet https://download.nextcloud.com/server/releases/latest-$NCVERSION.zip
          unzip latest-$NCVERSION.zip

      - name: Checkout ${{ env.APP_NAME }} app
        uses: actions/checkout@v3
        with:
          path: nextcloud/apps/${{ env.APP_NAME }}

      - name: Checkout ${{ env.CPA_NAME }} app
        uses: actions/checkout@v3
        with:
          repository: cloud-py-api/${{ env.CPA_NAME }}
          path: nextcloud/apps/${{ env.CPA_NAME }}

      - name: Set up php ${{ matrix.php-versions }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          tools: phpunit
          extensions: mbstring, iconv, fileinfo, intl, mysql, pdo_mysql
          coverage: none

      - name: Set up PHPUnit
        working-directory: nextcloud/apps/${{ env.APP_NAME }}
        run: composer i

      - name: Set up Nextcloud
        env:
          DB_PORT: 4444
        run: |
          mkdir nextcloud/data
          php nextcloud/occ maintenance:install --verbose --database=mysql --database-name=nextcloud --database-host=127.0.0.1 --database-port=$DB_PORT --database-user=root --database-pass=rootpassword --admin-user admin --admin-pass password
          php nextcloud/occ app:enable ${{ env.CPA_NAME }}
          php nextcloud/occ app:enable ${{ env.APP_NAME }}

      - name: Check PHPUnit config file existence
        id: check_phpunit
        uses: andstor/file-existence-action@v2
        with:
          files: nextcloud/apps/${{ env.APP_NAME }}/${{ env.PHPUNIT_CONFIG }}

      - name: Run Nextcloud
        run: php -S localhost:8080 &

      - name: PHPUnit
        # Only run if phpunit config file exists
        if: steps.check_phpunit.outputs.files_exists == 'true'
        working-directory: nextcloud/apps/${{ env.APP_NAME }}
        run: ./vendor/phpunit/phpunit/phpunit -c ${{ env.PHPUNIT_CONFIG }}

      - name: Check PHPUnit integration config file existence
        id: check_integration
        uses: andstor/file-existence-action@v2
        with:
          files: nextcloud/apps/${{ env.APP_NAME }}/${{ env.PHPUNIT_INTEGRATION_CONFIG }}

      - name: PHPUnit integration
        # Only run if phpunit integration config file exists
        if: steps.check_integration.outputs.files_exists == 'true'
        working-directory: nextcloud/apps/${{ env.APP_NAME }}
        run: ./vendor/phpunit/phpunit/phpunit -c ${{ env.PHPUNIT_INTEGRATION_CONFIG }}

  phpunit-pgsql:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-versions: ["8.0"]
        server-versions: ['25']

    services:
      postgres:
        image: postgres
        ports:
          - 4444:5432/tcp
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: rootpassword
          POSTGRES_DB: nextcloud
        options: --health-cmd pg_isready --health-interval 5s --health-timeout 2s --health-retries 5

    steps:
      - name: Cache nextcloud server
        id: nextcloud_setup
        uses: actions/cache@v3
        with:
          path: nextcloud-${{ matrix.server-versions }}.zip
          key: ${{ matrix.server-versions }}

      - name: Download nextcloud ${{ matrix.server-versions }}
        if: steps.nextcloud_setup.outputs.cache-hit != 'true'
        continue-on-error: true
        id: server-checkout
        run: |
          NCVERSION=${{ matrix.server-versions }}
          wget --quiet https://download.nextcloud.com/server/releases/latest-$NCVERSION.zip
          unzip latest-$NCVERSION.zip

      - name: Checkout app
        uses: actions/checkout@v3
        with:
          path: nextcloud/apps/${{ env.APP_NAME }}

      - name: Checkout ${{ env.CPA_NAME }} app
        uses: actions/checkout@v3
        with:
          repository: cloud-py-api/${{ env.CPA_NAME }}
          path: nextcloud/apps/${{ env.CPA_NAME }}

      - name: Set up php ${{ matrix.php-versions }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          tools: phpunit
          extensions: mbstring, iconv, fileinfo, intl, pgsql, pdo_pgsql
          coverage: none

      - name: Set up PHPUnit
        working-directory: nextcloud/apps/${{ env.APP_NAME }}
        run: composer i

      - name: Set up Nextcloud
        env:
          DB_PORT: 4444
        run: |
          mkdir data
          php nextcloud/occ maintenance:install --verbose --database=pgsql --database-name=nextcloud --database-host=127.0.0.1 --database-port=$DB_PORT --database-user=root --database-pass=rootpassword --admin-user admin --admin-pass password
          php nextcloud/occ app:enable ${{ env.CPA_NAME }}
          php nextcloud/occ app:enable ${{ env.APP_NAME }}

      - name: Check PHPUnit config file existence
        id: check_phpunit
        uses: andstor/file-existence-action@v2
        with:
          files: nextcloud/apps/${{ env.APP_NAME }}/${{ env.PHPUNIT_CONFIG }}

      - name: PHPUnit
        # Only run if phpunit config file exists
        if: steps.check_phpunit.outputs.files_exists == 'true'
        working-directory: nextcloud/apps/${{ env.APP_NAME }}
        run: ./vendor/phpunit/phpunit/phpunit -c ${{ env.PHPUNIT_CONFIG }}

      - name: Check PHPUnit integration config file existence
        id: check_integration
        uses: andstor/file-existence-action@v2
        with:
          files: nextcloud/apps/${{ env.APP_NAME }}/${{ env.PHPUNIT_INTEGRATION_CONFIG }}

      - name: Run Nextcloud
        # Only run if phpunit integration config file exists
        if: steps.check_integration.outputs.files_exists == 'true'
        run: php -S localhost:8080 &

      - name: PHPUnit integration
        # Only run if phpunit integration config file exists
        if: steps.check_integration.outputs.files_exists == 'true'
        working-directory: nextcloud/apps/${{ env.APP_NAME }}
        run: ./vendor/phpunit/phpunit/phpunit -c ${{ env.PHPUNIT_INTEGRATION_CONFIG }}

  phpunit-summary:
    runs-on: ubuntu-latest
    needs: [phpunit-mysql, phpunit-pgsql]

    if: always()

    name: phpunit-summary

    steps:
      - name: PHPUnit summary status
        run: if ${{ needs.phpunit-mysql.result != 'success' || needs.phpunit-pgsql.result != 'success' }}; then exit 1; fi

  js-unit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout app
        uses: actions/checkout@v3
        with:
          path: apps/${{ env.APP_NAME }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Install dependencies
        working-directory: apps/${{ env.APP_NAME }}
        run: npm ci

      - name: Run unit tests
        working-directory: apps/${{ env.APP_NAME }}
        run: npm run test
